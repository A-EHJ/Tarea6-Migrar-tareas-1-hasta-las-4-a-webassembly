@page "/Registrar/Tickets"
@page "/Registrar/Tickets/{TicketId:int}"
@using System.Text.RegularExpressions;
@using Tarea6.Shared;
@inject NotificationService notificationService
@inject HttpClient httpClient

<PageTitle>Registrar Tickets</PageTitle>

<EditForm Model="Tickets" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="text-center">Registro de Tickets</h3>
            </div>
            <div class=card-body>

                @*TicketId*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4 d-inline-block">
                    <label>TicketId:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Tickets.TicketId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Fecha*@
                <div class="mb-3 col-3 d-inline-block">
                    <label class="form-label">Fecha:</label>
                    <InputDate @bind-Value="Tickets.Fecha" class="form-control" placeholder="Fecha" />
                    <ValidationMessage For="@(() => Tickets.Fecha)" />
                </div>

                @*ClienteId*@
                <div>
                    <label class="form-label">Cliente</label>
                    <InputNumber @bind-Value="Tickets.ClienteId" class="form-control" placeholder="0" />
                    <ValidationMessage For="@(() => Tickets.ClienteId)" />
                </div>
                <div class="row">
                    @*SistemaId*@
                    <div class="mb-3 col-3 d-inline-block">
                        <label class="form-label">Sistema</label>
                        <InputNumber @bind-Value="Tickets.SistemaId" class="form-control" placeholder="0" />
                        <ValidationMessage For="@(() => Tickets.SistemaId)" />
                    </div>

                    @*PrioridadId*@
                    <div class="mb-3 col-3 d-inline-block">
                        <label class="form-label">Prioridad</label>
                        <InputNumber @bind-Value="Tickets.PrioridadId" class="form-control" placeholder="0" />
                        <ValidationMessage For="@(() => Tickets.PrioridadId)" />
                    </div>
                </div>

                @*SolicitadoPor*@
                <div class="mb-3">
                    <label class="form-label">Solicitado Por</label>
                    <InputText @bind-Value="Tickets.SolicitadoPor" class="form-control" placeholder="Nombre del solicitante" />
                    <ValidationMessage For="@(() => Tickets.SolicitadoPor)" />
                </div>

                @*Asunto*@
                <div class="mb-3">
                    <label class="form-label">Asunto</label>
                    <InputText @bind-Value="Tickets.Asunto" class="form-control" placeholder="Asunto" />
                    <ValidationMessage For="@(() => Tickets.Asunto)" />
                </div>

                @*Descripción*@
                <div class="mb-3">
                    <label class="form-label">Descripción</label>
                    <InputText @bind-Value="Tickets.Descripcion" class="form-control" placeholder="Descripción" />
                    <ValidationMessage For="@(() => Tickets.Asunto)" />
                </div>
            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]

    public int TicketId { get; set; }

    public Tickets Tickets { get; set; } = new Tickets();

    protected override async Task OnInitializedAsync()
    {
        if(TicketId>0)
        {
            this.Tickets.TicketId = TicketId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        try { await httpClient.GetFromJsonAsync<Clientes>($"api/Tickets/{Tickets.TicketId}"); }
        catch (Exception ex)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado",
                    Detail = ex.Message,
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }
        var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{Tickets.TicketId}");
        if (ticketEncontrado != null)
        {
            this.Tickets = ticketEncontrado;
            StateHasChanged();
        }
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Tickets", Tickets);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha guardado",
                    Detail = response.ReasonPhrase ?? "error",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var Respuesta = await response.Content.ReadFromJsonAsync<Tickets>();
        if (Respuesta is not null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado",
                    Detail = "Se ha creado",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            Tickets = Respuesta;
            StateHasChanged();
        }
    }

    public void Nuevo()
    {
        this.Tickets = new Tickets();
        // = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Tickets/{Tickets.TicketId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha Eliminado",
                    Detail = response.ReasonPhrase ?? "error",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
            Nuevo();
    }
}
